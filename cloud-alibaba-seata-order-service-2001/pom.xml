<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>springcloud-alibaba-none</artifactId>
        <groupId>org.example</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>cloud-alibaba-seata-order-service-2001</artifactId>

    <dependencies>
        <!--nacos-->
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
        </dependency>
        <!--seata-->

        <!--seata start-->
        <!-- 整合spring alibaba cloud的seata 开始 需要排除 seata-spring-boot-starter 再引入 因为客户端版本可能不一致 我们使用的是1.4的服务端版本-->
        <!--也可以先排除seata-all，再加载seata-all，道理同上-->
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-seata</artifactId>
            <exclusions>
                <!--<exclusion>
                    <groupId>io.seata</groupId>
                    <artifactId>seata-all</artifactId>
                </exclusion>-->
                <!--或者使用下面的-->
                <exclusion>
                    <groupId>io.seata</groupId>
                    <artifactId>seata-spring-boot-starter</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!--<dependency>
            <groupId>io.seata</groupId>
            <artifactId>seata-all</artifactId>
        </dependency>-->
        <!--或者使用下面的-->
        <dependency>
            <groupId>io.seata</groupId>
            <artifactId>seata-spring-boot-starter</artifactId>
        </dependency>
        <!--SEATA整合nacos-->
        <dependency>
            <groupId>com.alibaba.nacos</groupId>
            <artifactId>nacos-client</artifactId>
        </dependency>
        <!--seata-end-->

        <!--feign-->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-openfeign</artifactId>
        </dependency>
        <!--web-actuator-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <!--mysql-druid-->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid-spring-boot-starter</artifactId>
        </dependency>
        <dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
    </dependencies>


</project>



<!--seata:是一款开源的分布式事务解决方案，致力于在微服务架构下提供高性能和简单易用的分布式事务
单体应用被拆分为微服务应用，原来的三个模块被拆分成三个独立的应用，分别使用三个独立的数据源，业务
操作需要调用三个应用才能完成，此时每个服务内部的数据一致性由本地事务来保证，但全局的数据一致性没法保证

一句话：一次业务操作需要跨多个数据源或多个系统进行远程调用，会产生分布式事务问题，
seata 分布式事务处理过程中的id和三个组件模型
    全局唯一的事务id: transaction id  XID
    事务协调器，维护全局事务的运行状态，负责协调并驱动全局事务的提交或回滚： transaction coordinator TC
    控制事务的边界，负责开启一个全局事务，并最终发起全局提交或全局回滚决议 transaction manager TM
    控制分支事务，负责分支注册，状态汇报，并接受事务协调器的指令，驱动分支（本地）事务的提交或回滚：resource manager RM

处理过程：
    1：TM向TC申请一个全局事务，全局事务创建成功并生成一个全局的XID
    2: XID在微服务调用链路的上下文中传播
    3: RM向TC注册分支事务，将其纳入XID对应全局事务的管辖
    4: TM向TC发起针对XID的全局提交或回滚决议
    5: TC调度XID下管辖的全部分支事务完成提交或回滚请求

seata的分布式交易解决方案：
    spring本地@Transactional
    全局的@GlobalTransactional


seata整合nacos:
       注意查看官网以及github上面的配置，以及相应的数据库表的创建和相应的配置
       1：在linux/windows上安装seata-server
       2: 配置seata-server 与nacos和mysql的整合
       3： 在mysql数据库中新建seata schema 以及创建必要的表（在github网址https://github.com/seata/seata/tree/develop/script/上可以看到相应的sql脚本）
           参考博文：https://blog.csdn.net/zhang18024666607/article/details/113118599
                   https://blog.csdn.net/qq_39506978/article/details/105166699
                   https://blog.csdn.net/xt_yangjie/article/details/112555198
            client:用于存放客户端的配置和sql
                at:AT模式下的undo_log建表语句
                conf:客户端的配置文件
                saga:SAGA模式下所需要的建表语句
                spring:springboot应用支持的配置文件
            server:存放server模式下所需sql和部署脚本
                db:server侧的保存模式为db时所需要的建表语句
                docker-compose:server侧通过docker-compose部署的脚本
                helm:server侧通过helm部署的脚本
                kubernetes:server侧通过kubernetes部署的脚本
            center-config:用于存放各种配置中心的初始化脚本，执行时会读取config.txt配置文件，并写入配置中心
                nacos: 用于向 Nacos 中添加配置
                zk: 用于向 Zookeeper 中添加配置，脚本依赖 Zookeeper 的相关脚本，需要手动下载；ZooKeeper相关的配置可以写在 zk-params.txt 中，也可以在执行的时候输入
                apollo: 向 Apollo 中添加配置，Apollo 的地址端口等可以写在 apollo-params.txt，也可以在执行的时候输入
                etcd3: 用于向 Etcd3 中添加配置
                consul: 用于向 consul 中添加配置








    client端
    创建业务数据库（自定义），逻辑为下单-》减库存-》减余额
    建表语句见脑图
    seata_order:订单数据库
        该数据库下新建t_order表
    seata_storage:库存数据库
        该数据库下新建t_storage表
    seata_account:账户信息数据库
        该数据库下新建t_account表

    然后在三个库下分别建立回滚日志表undo_log,注意server端并不需要这个回滚日志表，它存在于客户端业务数据库中



    注意！！！，关于整合nacos,seata-server在启动时配置是通过resgisry.conf引入file.conf的
    也可以上传配置至Nacos配置中心，（结合参考官网nacos配置中心）
    1：在seata目录创建config.txt，（该文件内容参考上方地址脚本,或者直接下载上传,注意namespace配置为id）注意跟nacos-config.sh不在同一个目录
    2：进入seata/conf目录下，创建一个nacos-config.sh文件： # touch nacos-config.sh
        将https://github.com/seata/seata/blob/develop/script/config-center/nacos/nacos-config.sh的内容编辑进入nacos-config.sh
    3：最后再执行导入（先启动seata服务器）：sh nacos-config.sh -p 3333  -h 192.168.40.128  -g SEATA_GROUP -t a1145142-1356-41a8-9d27-031fc93662f1 (-t 就是namespace-id)，config.txt位置没放对，执行脚本会提示正确位置
    参考https://github.com/seata/seata/tree/develop/script/config-center 的config.txt并修改,之后运行仓库中提供的nacos脚本,将信息提交到nacos控制台,如果有需要更改,可直接通过控制台更改.
    随后,重启 Seata-Server
            ./seata-server.sh
    和Client应用后，您同样也能发现部分配置已经从配置中心中读取,例如:store.mode.


    依次启动nacos-server,seata-server,三个微服务访问如下地址
    http://localhost:2001/order/create?userId=1&productId=1&count=10&money=100

-->